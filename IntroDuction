Hello Users!
Priyanshu This Side
I have created a simple software for blood bank using C programming.

Concepts Used :
Structure
Trees
Functions
Basics of C Programming

# Code Starts

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS 

// Structure to store donor details
typedef struct {
    char name[50];
    char bloodGroup[5];
    char phone[15];
    char location[50];
} Donor;

// Define the Node struct for the BST
typedef struct Node {
    Donor donor;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new node
Node* createNode(Donor donor) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->donor = donor;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Insert donor into the BST
Node* insert(Node* root, Donor donor) {
    if (root == NULL) {
        return createNode(donor);
    }

    // Sorting based on blood group and location
    int cmp = strcmp(donor.bloodGroup, root->donor.bloodGroup);
    if (cmp == 0) {
        cmp = strcmp(donor.location, root->donor.location);
    }

    if (cmp < 0) {
        root->left = insert(root->left, donor);
    }
    else {
        root->right = insert(root->right, donor);
    }

    return root;
}

// Traverse the BST and print all donors that match the blood group and location
void searchAll(Node* root, char* bloodGroup, char* location) {
    if (root == NULL) {
        return;
    }

    searchAll(root->left, bloodGroup, location);

    int cmp = strcmp(bloodGroup, root->donor.bloodGroup);
    if (cmp == 0 && strcmp(location, root->donor.location) == 0) {
        displayDonor(root->donor);
    }

    searchAll(root->right, bloodGroup, location);
}

// Input donor details
void inputDonor(Donor* donor) {
    printf("Enter Name: ");
    scanf(" %[^\n]%*c", donor->name);
    printf("Enter Blood Group (e.g., A+, B-): ");
    scanf("%s", donor->bloodGroup);
    printf("Enter Phone Number: ");
    scanf("%s", donor->phone);
    printf("Enter Location: ");
    scanf(" %[^\n]%*c", donor->location);
}

// Display donor details
void displayDonor(Donor donor) {
    printf("\n--- Donor Found ---\n");
    printf("Name: %s\n", donor.name);
    printf("Blood Group: %s\n", donor.bloodGroup);
    printf("Phone: %s\n", donor.phone);
    printf("Location: %s\n", donor.location);
}

// Insert sample donors for testing
void insertSampleDonors(Node** root) {
    *root = insert(*root, (Donor) { "Alice", "A+", "1234567890", "Pune" });
    *root = insert(*root, (Donor) { "Aisha", "A+", "2345678901", "Pune" });
    *root = insert(*root, (Donor) { "Aarav", "A+", "3456789012", "Pune" });
    *root = insert(*root, (Donor) { "Arjun", "A+", "4567890123", "Pune" });
    // Add more sample donors here...
}

// Menu-driven system
void menu(Node** root) {
    int choice;
    char bloodGroup[5], location[50];
    Donor donor;

    do {
        printf("\n--- Blood Bank Management ---\n");
        printf("1. Add Donor\n");
        printf("2. Search Donors by Blood Group and Location\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            inputDonor(&donor);
            *root = insert(*root, donor);
            break;
        case 2:
            printf("Enter required Blood Group: ");
            scanf("%s", bloodGroup);
            printf("Enter required Location (Mumbai/Pune/Nashik/Nagpur): ");
            scanf(" %[^\n]%*c", location);
            printf("\n--- Matching Donors ---\n");
            searchAll(*root, bloodGroup, location);
            break;
        case 3:
            printf("Exiting...\n");
            break;
        default:
            printf("Invalid choice! Try again.\n");
        }
    } while (choice != 3);
}

int main() {
    Node* root = NULL;

    // Insert some sample donors for testing
    insertSampleDonors(&root);

    // Start menu-driven system
    menu(&root);

    return 0;
}

# CODE ENDS
